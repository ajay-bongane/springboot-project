{"version":3,"sources":["logo.svg","components/LastAttemptsComponent.js","services/ChallengeApiClient.js","services/GameApiClient.js","components/LeaderBoardComponent.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["LastAttemptsComponent","this","props","lastAttempts","map","a","style","color","correct","factorA","factorB","resultAttempt","id","React","Component","ChallengeApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","b","guess","POST_RESULTS","method","headers","body","JSON","stringify","userAlias","console","log","GET_ATTEMPTS_BY_ALIAS","userIds","GET_USERS_BY_IDS","join","GameApiClient","GET_LEADERBOARD","LeaderBoardComponent","state","leaderboard","serverError","refreshLeaderBoard","setInterval","bind","leaderBoard","then","lbRes","ok","json","Promise","reject","ChallengesApiClient","getUsers","usRes","lb","setState","getLeaderBoardData","lbData","row","userId","length","getUserAliasData","data","userMap","Map","forEach","idAlias","set","alias","get","updateLeaderBoard","catch","reason","totalScore","badges","className","ChallengeComponent","message","handleSubmitResult","handleChange","refreshChallenge","challenge","res","updateMessage","event","name","target","value","preventDefault","sendGuess","updateLastAttempts","m","getAttempts","attempts","item","push","onSubmit","type","maxLength","onChange","min","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d84d2d1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nclass LastAttemptsComponent extends React.Component{\r\n\r\n    render(){\r\n        return (\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <td>Challenge</td>\r\n                    <td>Your guess</td>\r\n                    <td>Correct</td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    this.props.lastAttempts.map(a=>\r\n                        <tr key={a.id}\r\n                        style={{ color: a.correct ? 'green' : 'red' }}>\r\n                            <td>{a.factorA} x {a.factorB}</td>\r\n                            <td>{a.resultAttempt}</td>\r\n                            <td>{a.correct ? \"Correct\" :\r\n                                (\"Incorrect (\" + a.factorA * a.factorB + \")\")}</td>\r\n                        </tr>)\r\n                }\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LastAttemptsComponent;","class ChallengeApiClient{\r\n    static SERVER_URL='http://localhost:8000';\r\n    static GET_CHALLENGE = '/challenges/random';\r\n    static POST_RESULTS = '/attempts';\r\n    static GET_ATTEMPTS_BY_ALIAS = '/attempts?alias=';\r\n    static GET_USERS_BY_IDS = '/users';\r\n\r\n\r\n    static challenge(): Promise<Response> {\r\n        return fetch(ChallengeApiClient.SERVER_URL + ChallengeApiClient.GET_CHALLENGE);\r\n    }\r\n\r\n    static sendGuess(user: string,\r\n                     a: number,\r\n                     b: number,\r\n                     guess: number): Promise<Response> {\r\n        return fetch(ChallengeApiClient.SERVER_URL+ChallengeApiClient.POST_RESULTS,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body: JSON.stringify(\r\n                    {\r\n                        userAlias: user,\r\n                        factorA: a,\r\n                        factorB: b,\r\n                        guess: guess\r\n                    }\r\n                )\r\n            });\r\n    }\r\n\r\n    static getAttempts(userAlias: string): Promise<Response> {\r\n        console.log('Get attempts for '+userAlias);\r\n        return fetch(ChallengeApiClient.SERVER_URL + ChallengeApiClient.GET_ATTEMPTS_BY_ALIAS + userAlias);\r\n    }\r\n\r\n    static getUsers(userIds: number[]): Promise<Response>{\r\n        return fetch(ChallengeApiClient.SERVER_URL +\r\n        ChallengeApiClient.GET_USERS_BY_IDS +\r\n        '/' + userIds.join(','));\r\n    }\r\n}\r\n\r\nexport default ChallengeApiClient;","\r\nclass GameApiClient{\r\n\r\n    static SERVER_URL = 'http://localhost:8000';\r\n    static GET_LEADERBOARD = '/leaders';\r\n\r\n    static leaderBoard(): Promise<Response> {\r\n        return fetch(GameApiClient.SERVER_URL + GameApiClient.GET_LEADERBOARD);\r\n    }\r\n}\r\n\r\nexport default GameApiClient;","import * as React from 'react';\r\nimport GameApiClient from '../services/GameApiClient';\r\nimport ChallengesApiClient from '../services/ChallengeApiClient';\r\n\r\nclass LeaderBoardComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            leaderboard: [],\r\n            serverError: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLeaderBoard();\r\n        // sets a timer to refresh the leaderboard every 5 seconds\r\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\r\n    }\r\n\r\n    getLeaderBoardData(): Promise {\r\n        return GameApiClient.leaderBoard().then(\r\n            lbRes => {\r\n                if (lbRes.ok) {\r\n                    return lbRes.json();\r\n                } else {\r\n                    return Promise.reject(\"Gamification: error response\");\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    getUserAliasData(userIds: number[]): Promise {\r\n        return ChallengesApiClient.getUsers(userIds).then(\r\n            usRes => {\r\n                if(usRes.ok) {\r\n                    return usRes.json();\r\n                } else {\r\n                    return Promise.reject(\"Multiplication: error response\");\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    updateLeaderBoard(lb) {\r\n        this.setState({\r\n            leaderboard: lb,\r\n            // reset the flag\r\n            serverError: false\r\n        });\r\n    }\r\n\r\n    refreshLeaderBoard() {\r\n        this.getLeaderBoardData().then(\r\n            lbData => {\r\n                let userIds = lbData.map(row => row.userId);\r\n                if(userIds.length > 0) {\r\n                    this.getUserAliasData(userIds).then(data => {\r\n                        // build a map of id -> alias\r\n                        let userMap = new Map();\r\n                        data.forEach(idAlias => {\r\n                            userMap.set(idAlias.id, idAlias.alias);\r\n                        });\r\n                        // add a property to existing lb data\r\n                        lbData.forEach(row =>\r\n                            row['alias'] = userMap.get(row.userId)\r\n                        );\r\n                        this.updateLeaderBoard(lbData);\r\n                    }).catch(reason => {\r\n                        console.log('Error mapping user ids', reason);\r\n                        this.updateLeaderBoard(lbData);\r\n                    });\r\n                }\r\n            }\r\n        ).catch(reason => {\r\n            this.setState({ serverError: true });\r\n            console.log('Gamification server error', reason);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.serverError) {\r\n            return (\r\n                <div>We're sorry, but we can't display game statistics at this\r\n                    moment.</div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <h3>Leaderboard</h3>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>User</th>\r\n                        <th>Score</th>\r\n                        <th>Badges</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\r\n                        <td>{row.alias ? row.alias : row.userId}</td>\r\n                        <td>{row.totalScore}</td>\r\n                        <td>{row.badges.map(\r\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\r\n                        </td>\r\n                    </tr>)}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeaderBoardComponent;","import * as React from \"react\";\r\n//import ApiClient from \"../services/ApiClient\";\r\nimport LastAttemptsComponent from './LastAttemptsComponent';\r\nimport ChallengeApiClient from \"../services/ChallengeApiClient\";\r\nimport LeaderBoardComponent from \"./LeaderBoardComponent\";\r\n\r\nclass ChallengeComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: '', b: '',\r\n            user: '',\r\n            message: '',\r\n            guess: 0,\r\n            lastAttempts: [],\r\n        };\r\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.refreshChallenge();\r\n    }\r\n\r\n    refreshChallenge() {\r\n        ChallengeApiClient.challenge().then(\r\n            res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        this.setState({\r\n                            a: json.factorA,\r\n                            b: json.factorB\r\n                        });\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Can't reach the server\");\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    handleChange(event) {\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmitResult(event) {\r\n        event.preventDefault();\r\n        ChallengeApiClient.sendGuess(this.state.user,\r\n            this.state.a, this.state.b,\r\n            this.state.guess)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        if (json.correct) {\r\n                            this.updateMessage(\"Congratulations! Your guess is correct\");\r\n                        } else {\r\n                            this.updateMessage(\"Oops! Your guess \" + json.resultAttempt +\r\n                                \" is wrong, but keep playing!\");\r\n                        }\r\n                        this.updateLastAttempts(this.state.user);\r\n                        this.refreshChallenge();\r\n                    });\r\n                } else {\r\n                    this.updateMessage(\"Error: server error or not available\");\r\n                }\r\n            });\r\n    }\r\n\r\n    updateMessage(m: string) {\r\n        this.setState({\r\n            message: m\r\n        });\r\n    }\r\n\r\n    updateLastAttempts(userAlias: string) {\r\n        ChallengeApiClient.getAttempts(userAlias).then(res => {\r\n            if (res.ok) {\r\n                let attempts: Attempt[] = [];\r\n                res.json().then(data => {\r\n                    data.forEach(item => {\r\n                        attempts.push(item);\r\n                    });\r\n                    this.setState({\r\n                        lastAttempts: attempts\r\n                    });\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display-column\">\r\n                <div>\r\n                    <h3>Your new challenge is</h3>\r\n                    <div className=\"challenge\">\r\n                        {this.state.a} x {this.state.b}\r\n                    </div>\r\n                </div>\r\n                <form onSubmit={this.handleSubmitResult}>\r\n                    <label>\r\n                        Your alias:\r\n                        <input type=\"text\" maxLength=\"12\"\r\n                               name=\"user\"\r\n                               value={this.state.user}\r\n                               onChange={this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <label>\r\n                        Your guess:\r\n                        <input type=\"number\" min=\"0\"\r\n                               name=\"guess\"\r\n                               value={this.state.guess}\r\n                               onChange={this.handleChange}/>\r\n                    </label>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n                <h4>{this.state.message}</h4>\r\n                {this.state.lastAttempts.length > 0 &&\r\n                <LastAttemptsComponent lastAttempts={this.state.lastAttempts}/>\r\n                }\r\n                <LeaderBoardComponent />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChallengeComponent;","import logo from './logo.svg';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n  return <ChallengeComponent/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}